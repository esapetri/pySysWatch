[General]
# Log file path
LogFile = /var/log/system_monitor.log
# Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LogLevel = INFO

[Logging]
LogFile = ./logs/system_monitor.log
MaxLogSize = 10485760
BackupCount = 5

[Alerting]
# Enable/disable email notifications
EnableEmailAlerts = false
# Enable/disable Slack notifications
EnableSlackAlerts = true

[EmailConfig]
# Admin email for notifications
AdminEmail = admin@example.com
# SMTP server for sending emails
SMTPServer = localhost
# SMTP port
SMTPPort = 25
# SMTP username (if required)
SMTPUsername = 
# SMTP password (if required)
SMTPPassword = 

[SlackConfig]
# Slack webhook URL
SlackWebhookURL = https://hooks.slack.com/services/

[Thresholds]
# Disk usage warning threshold (percentage)
DiskUsageWarning = 70
# Disk usage critical threshold (percentage)
DiskUsageCritical = 90
# CPU usage threshold (percentage)
CPUUsageThreshold = 80
# Memory usage threshold (percentage)
MemoryUsageThreshold = 90
# Swap usage threshold (percentage)
SwapUsageThreshold = 85
# How often to send disk alerts (in hours)
DiskAlertFrequency = 24
# How often to send CPU alerts (in hours)
CPUAlertFrequency = 2
# How often to send Memory alerts (in hours)
MemoryAlertFrequency = 1

[Monitoring]
# Interval between monitoring checks (in seconds)
MonitoringInterval = 60
# Enable/disable specific monitoring functions
EnableDiskSpaceMonitoring = true
EnableJournalMonitoring = true
EnableCPUMemoryMonitoring = true
EnableServiceUnitMonitoring = true

[JournalMonitoring]
EnableJournalMonitoring = true

# Format: 
# event_name.title = Alert Title
# event_name.filters = must_contain_1,must_contain_2,must_contain_3
# event_name.start = starting_string (optional)

# System Boot/Shutdown Events
reboot.title = System Reboot/Shutdown Detected
#reboot.start = systemd[1]
reboot.filters = "Shutting down" or "Starting up" or "System shutdown" or "System reboot"

# Out of Memory Events
oom.title = Out of Memory Event Detected
oom.filters = "oom-killer" or "Out of Memory" or "Killed process"

# Hardware Error Events
hardware_error.title = Hardware Issue Detected
#hardware_error.start = kernel
hardware_error.filters = "hardware error" or "CPU error" or "Memory error" or "MCE error"

# Network Issues
network.title = Network Issue Detected
#network.start = NetworkManager
network.filters = ("network" and "failed") or "connection failed" or "dhcp error" or "dns error"

# Sudo Commands
sudo.title = Sudo Command Executed
#sudo.start = sudo
sudo.filters = "sudo" or "authentication failure" or "TTY=" or "COMMAND="

# Service Failures
service.title = Service Failure Detected
#service.start = systemd
service.filters = ("failed" and "service") or "failed to start" or "process exited"

# Login Events
login.title = Login Event Detected
#login.start = sshd
login.filters = "login" or "authentication failure" or "invalid user" or "failed password"

# Filesystem Errors
filesystem.title = File System Error Detected
#filesystem.start = kernel
filesystem.filters = ("filesystem" and "error") or "read-only filesystem" or "corrupt filesystem" or "journal commit"

# I/O Errors
io_error.title = Disk I/O Error Detected
#io_error.start = kernel
io_error.filters = "i/o error" or "sector error" or "buffer i/o error" or "read error"

# Hardware Changes
hardware.title = Hardware Change Detected
#hardware.start = kernel
hardware.filters = "new hardware" or "removed hardware" or "USB disconnect" or "device not accepting address"

# Security Alerts
security.title = Security Alert Detected
#security.start = audit
security.filters = "security alert" or "authentication failure" or "unauthorized access" or "permission denied"

# Dependency Failures
dependency.title = Unit Dependency Failure Detected
#dependency.start = systemd
dependency.filters = "dependency failed" or "found dependency" or "dependency failed to start"

# Time Sync Issues
time_sync.title = Time Synchronization Failure Detected
#time_sync.start = chronyd
time_sync.filters = ("time sync" and "failed") or "time jump" or "clock step"

# Power Events
power.title = Power Event Detected
#power.start = kernel
power.filters = "power" or "battery" or "AC adapter" or "critical thermal"

# Connection Events
connection.title = Connection Event Detected
#connection.start = sshd
connection.filters = "connection" or "login" or "connected" or "disconnected" and not("connection closed by remote host" or "[preauth]")

# New Important Events Added:

# SELinux Events
selinux.title = SELinux Security Event Detected
#selinux.start = audit
selinux.filters = "avc: denied" or "selinux" or "security context"

# Disk Space Events
disk_space.title = Disk Space Event Detected
#disk_space.start = kernel
disk_space.filters = "no space left" or "disk full" or "inode" or "directory overflow"

# System Resource Events
resource.title = System Resource Event Detected
#resource.start = kernel
resource.filters = "out of memory" or "high load" or "resource exhaustion" or "cannot allocate memory"

# Process Crashes
crash.title = Process Crash Detected
#crash.start = systemd-coredump
crash.filters = "segfault" or "core dumped" or "crashed" or "killed by signal"

# Firewall Events
firewall.title = Firewall Event Detected
#firewall.start = kernel
firewall.filters = "iptables" or "firewall" or "dropped" or "rejected"

# Storage Device Events
storage.title = Storage Device Event Detected
#storage.start = kernel
storage.filters = "drive error" or "bad sector" or "disk error" or "SMART error"

# System Updates
updates.title = System Update Event Detected
#updates.start = dpkg
updates.filters = "installed" or "upgraded" or "removed" or "configured"

[ServiceUnitMonitoring]
#TODO broken
# Path to monitor for service unit changes
ServiceUnitPath = /etc/systemd/system
# Interval for checking service unit changes (in seconds)
ServiceUnitCheckInterval = 60

[CommandMonitoring]
EnableCommandMonitoring = true
# Format: 
# command_name.cmd = actual shell command
# command_name.interval = seconds between runs
# command_name.pattern = regex pattern to match (optional)
# command_name.format = output format template (optional)
# command_name.critical = true/false (optional, default false)

# APT Updates Check
apt_updates.cmd = apt list --upgradable 2>/dev/null | grep -v "Listing..." | wc -l
apt_updates.interval = 86400  # 24 hours in seconds
apt_updates.pattern = (\d+)
apt_updates.format = 📦 Available updates: {match[1]} packages
apt_updates.critical = true

# Docker Container Count
docker.cmd = docker ps --format "{{.Names}}" | wc -l
docker.interval = 86400
docker.pattern = (\d+)
docker.format = 🐳 Running containers: {match[1]}

# Zombie Process Check
zombies.cmd = ps aux | grep 'Z' | wc -l
zombies.interval = 86400
zombies.pattern = (\d+)
zombies.format = 🧟 Zombie processes: {match[1]}

; # IO Wait Time
; iowait.cmd = iostat | awk '/^avg-cpu:/{getline; print $4}'
; iowait.interval = 120
; iowait.pattern = ([\d\.]+)
; iowait.format = 💽 IO Wait: {match[1]}%

; # Open File Descriptors
; open_files.cmd = lsof | wc -l
; open_files.interval = 300
; open_files.pattern = (\d+)
; open_files.format = 📂 Open files: {match[1]}

; # Network Connections
; netstat.cmd = netstat -ant | wc -l
; netstat.interval = 180
; netstat.pattern = (\d+)
; netstat.format = 🌐 Active connections: {match[1]}

; # Disk Space Check
; disk_space.cmd = df -h
; disk_space.interval = 300
; disk_space.pattern = (\d+)%\s+/$
; disk_space.format = 🖴 Root disk usage: {match[1]}%
; disk_space.critical = true

; # Memory Usage
; memory.cmd = free -m | grep Mem
; memory.interval = 60
; memory.pattern = Mem:\s+(\d+)\s+(\d+)
; memory.format = 🧠 Memory: {match[2]}MB used of {match[1]}MB

; # Process Count
; process.cmd = ps aux | wc -l
; process.interval = 120
; process.pattern = (\d+)
; process.format = 👥 Process count: {match[1]}

; # Load Average
; load.cmd = uptime | grep -oP "load average: \K.*"
; load.interval = 60
; load.pattern = ([\d\.]+),\s+([\d\.]+),\s+([\d\.]+)
; load.format = ⚡ Load: 1m={match[1]}, 5m={match[2]}, 15m={match[3]}

; # Failed SSH Attempts
; ssh_fails.cmd = grep "Failed password" /var/log/auth.log | wc -l
; ssh_fails.interval = 600
; ssh_fails.pattern = (\d+)
; ssh_fails.format = 🔒 Failed SSH attempts: {match[1]}
; ssh_fails.critical = true
